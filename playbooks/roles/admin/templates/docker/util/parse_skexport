import json
import os 
import argparse


# var mapping for all comps
# e.g. {"{skexport_name}": "{internal_component_name}"}
actors = {"":""}
apps = {"":""}
authenticator = {"":""}
files = {"":""}
globus_proxy = {"":""}
jobs = {"":""}
meta = {"":""}
monitoring = {"":""}
notifications = {"":""}
pgrest = {"":""}
pods = {"":""}
proxy = {"":""}
security = {"":""}
skadmin = {"":""}
streams = {"":""}
systems = {"":""}
tapisui = {"":""}
tenants = {"":""}
tokens = {"JWTSIGNING_ADMIN_PRIVATEKEY": "site_admin_privatekey"}
vault = {"":""}
workflows = {"":""}


# parse args
parser = argparse.ArgumentParser()
parser.add_argument('-c', '--comp', help='Tapis component to export env file for', required=True)
parser.add_argument('-d', '--dir', help='Tapis data dir as defined in the ansible', default="{{ tapisdatadir }}")
args = parser.parse_args()

# normalize component name
component = args.comp.replace('-', '_')

# set local vars
infile = args.dir + '/skadmin/env'
local = locals()[component]
outfile = open(args.dir + '/' + args.comp + '/env', 'w')



with open(infile, 'r') as lines:
    for line in lines:
        if len(line) <= 1:
            continue # ignore empty line
        try:
            skexport_key, skexport_value = line.split('=', 1)
            skexport_value = skexport_value.replace('\\n', '\n') # sanitize newlines on priv/pub keys
            outfile.write(f"{local[skexport_key]}='{skexport_value}'")
        except KeyError:
            pass
            

outfile.close() 
