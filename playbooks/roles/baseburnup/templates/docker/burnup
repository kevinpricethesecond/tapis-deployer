#!/bin/bash

set -e 

# global Tapis burnup script

# Helps run all the components in the correct order

# sorting out some script coordinates
mydir_absolute=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
myscript_nameonly="$( basename -- "${BASH_SOURCE[0]}" )"
myscript_absolute="$mydir_absolute/$myscript_nameonly"

# uncomment for debug 
#echo $mydir_absolute
#echo $myscript_nameonly
#echo $myscript_absolute


burnup_or_exit () {
  echo "Burnup: $1" 
  cd $mydir_absolute/$1 || exit 1
  ./burnup || exit 1
  cd $mydir_absolute || exit 1
  echo "Done: $1" 
  return 0
}


echo "Start: top-level-burnup"

{%- if "tapisflavor" == "docker" %}
### Docker-specific setup 
docker network inspect tapis || docker network create tapis 
{% endif %}


### init / setup

{% if "proxy" in components_to_deploy %}
burnup_or_exit proxy
{% endif %}

{% if "vault" in components_to_deploy %}
burnup_or_exit vault
{% endif %}

{% if "skadmin" in components_to_deploy%}
burnup_or_exit skadmin
{% endif %}


### primary services

{% if "tenants" in components_to_deploy %}
burnup_or_exit tenants
{% endif %}

{% if "security" in components_to_deploy %}
burnup_or_exit security
{% endif %}

{% if "tokens" in components_to_deploy %}
burnup_or_exit tokens
{% endif %}

{% if "authenticator" in components_to_deploy %}
burnup_or_exit authenticator
{% endif %}


### secondary services

{% if "jobs" in components_to_deploy %}
burnup_or_exit jobs  
{% endif %}

{% if "files" in components_to_deploy %}
burnup_or_exit files
{% endif %}

{% if "systems" in components_to_deploy %}
burnup_or_exit systems
{% endif %}



echo "Done: top-level-burnup"

exit 0

#### services
#
#actors(){
#  cd $here/actors
#  ./burnup
#}
#
#apps(){
#  cd $here/apps
#  ./burnup
#}
#
#authenticator(){
#  cd $here/authenticator
#  ./burnup
#}
#
#container-registry(){
#  cd $here/container-registry
#  ./burnup
#}
#
#files(){
#  cd $here/files
#  ./burnup
#}
#
#jobs(){
#  cd $here/jobs
#  ./burnup
#}
#
#meta(){
#  cd $here/meta
#  ./burnup
#}
#
#monitoring(){
#  cd $here/monitoring
#  ./burnup
#}
#
#notifications(){
#  cd $here/notifications
#  ./burnup
#}
#
#pgrest(){
#  echo "pgrest:"
#  cd $here/pgrest
#  ./burnup
#}
#
#pgrest-a2cps-dev(){
#  echo "pgrest-a2cps-dev:"
#  cd $here/pgrest-a2cps-dev
#  ./burnup
#}
#
#pgrest-a2cps-prod(){
#  echo "pgrest-a2cps-prod:"
#  cd $here/pgrest-a2cps-prod
#  ./burnup
#}
#
#pods(){
#  cd $here/pods
#  ./burnup
#}
#
#proxy(){
#  cd $here/proxy
#  ./burnup
#}
#
#security(){
#  cd $here/security
#  ./burnup
#}
#
#skadmin(){
#  cd $here/skadmin
#  ./burnup
#}
#
#streams(){
#  cd $here/streams
#  ./burnup
#}
#
#systems(){
#  cd $here/systems
#  ./burnup
#}
#
#tenants(){
#  cd $here/tenants
#  ./burnup
#}
#
#tokens(){
#  cd $here/tokens
#  ./burnup
#}
#
#vault(){
#  cd $here/vault
#  ./burnup
#}
#
#workflows(){
#  cd $here/workflows
#  ./burnup
#}
#
#primary_site(){
#  echo
#}
#
#associate_site(){
#  echo
#}
#
#
#### functions
#
#
#get_vault_token(){
#  echo
#}
#
#check_vault_unsealed(){
#  echo
#}
#
#get_public_keys(){
#  echo "Collecting public keys for associate site tenants. Please send these to your tenants admin before next steps in deployment."
#  cd $here/admin
#  ./get-assocsite-publickeys
#}
#
#
#init(){
#  {%- if "proxy" in components_to_deploy%}
#  proxy
#  {% endif %}
#
#  {%- if "vault" in components_to_deploy%}
#  vault
#  checkvault
#  {% else %}
#  # using external vault, so do not start one here
#  {% endif %}
#
#  {%- if "skadmin" in components_to_deploy%}
#  skadmin
#  {% endif %}
#
#  {%- if site_type == 2 %}
#  get_public_keys
#  {%- endif %}
#
#}
#
#
#primary_services(){
#  {%- if  "tenants" in components_to_deploy %}
#  tenants
#  {% endif %}
#
#  {%- if  "security" in components_to_deploy %}
#  security
#  {% endif %}
#
#  {%- if  "tokens" in components_to_deploy %}
#  tokens
#  {% endif %}
#
#  {%- if  "authenticator" in components_to_deploy %}
#  authenticator
#  {% endif %}
#}
#
#secondary_services() {
#
#  {%- if  "systems" in components_to_deploy %}
#  systems
#  {% endif %}
#
#  {%- if  "files" in components_to_deploy %}
#  files
#  {% endif %}
#
#  {%- if  "apps" in components_to_deploy %}
#  apps
#  {% endif %}
#
#  {%- if  "jobs" in components_to_deploy %}
#  jobs
#  {% endif %}
#
#  {%- if  "meta" in components_to_deploy %}
#  meta
#  {% endif %}
#
#  {%- if  "streams" in components_to_deploy %}
#  streams
#  {% endif %}
#
#  {%- if  "actors" in components_to_deploy %}
#  actors
#  {% endif %}
#
#  {%- if  "container-registry" in components_to_deploy %}
#  container-registry
#  {% endif %}
#
#  {%- if  "monitoring" in components_to_deploy %}
#  monitoring
#  {% endif %}
#
#  {%- if  "notifications" in components_to_deploy %}
#  notifications 
#  {% endif %}
#
#  {%- if  "pgrest" in components_to_deploy %}
#  pgrest
#  {% endif %}
#
#  {%- if  "pgrest-a2cps-dev" in components_to_deploy %}
#  pgrest-a2cps-dev
#  {% endif %}
#
#  {%- if  "pgrest-a2cps-prod" in components_to_deploy %}
#  pgrest-a2cps-prod
#  {% endif %}
#
#  {%- if  "pods" in components_to_deploy %}
#  pods
#  {% endif %}
#
#  {%- if  "workflows" in components_to_deploy %}
#  workflows
#  {% endif %}
#
#}
#
#### run
#
##getconfig
#
#case $1 in
#  checkvault)
#    "$@"
#    exit 0
#    ;;
#  init)
#    "$@"
#    exit 0
#    ;;
#  preflight_check)
#    "$@"
#    exit 0
#    ;;
#  postnginx_check)
#    "$@"
#    exit 0
#    ;;
#  primary_services)
#    "$@"
#    exit 0
#    ;;
#  secondary_services)
#    "$@"
#    exit 0
#    ;;
#  create_kservice)
#    "$@"
#    exit 0
#    ;;
#  get_public_keys)
#    "$@"
#    exit 0
#    ;;
#  *)
#    usage
#    exit 0
#    ;;
#esac
