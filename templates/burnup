#!/bin/bash

set -e 

# global Tapis burnup script

# Helps run all the components in the correct order

here=`pwd`

### vars

VAULTURL="{{vault_service_vault_url}}"
SERVICEURL=" {{admin_service_url}}"

### checks

checkcert(){
  # will not work until nginx is up
  echo "checking cert: $1"
  echo test | openssl s_client -showcerts -connect $1:443
}

curlurl(){
  # will not work until nginx is up
  u="https://$1"
  echo "curling url: $u"
  curl -k $u
}

pingsite(){
  echo "pinging url: $1"
  ping -c 1 -W 5 $1
}

checkvault_kube(){
  # TODO: fix to work if vault is remote
  # will not work until vault is up
  if [ "`kubectl exec -it deploy/vault vault status | grep Sealed | awk '{print $2}'`" != "false" ]
  then
    echo "Vault check failed. Exiting."
    exit 1
  fi
}

checkvault_remote(){
  # TODO: fix to work if vault is remote
  # will not work until vault is up
  # something like
  # curl -H "X-Vault-Token: $VAULT_TOKEN" -H "X-Vault-Namespace: $VAULT_NS" http://c002.rodeo.tacc.utexas.edu:32444/v1/sys/health | jq^C
  #if [ "`kubectl exec -it deploy/vault vault status | grep Sealed | awk '{print $2}'`" != "false" ]
  #then
  #  echo "Vault check failed. Exiting."
  #  exit 1
  #fi
  # TODO rcardone
  echo

}




preflight_check(){
  getconfig
  echo "site: $SERVICEURL"
  pingsite $SERVICEURL
}

postnginx_check(){
  curlurl $SERVICEURL
  checkcert $SERVICEURL
}




### services

actors(){
  echo
}

apps(){
  echo
}

authenticator(){
  echo
}

files(){
  echo
}

jobs(){
  echo
}

meta(){
  echo
}

monitoring(){
  echo
}

notifications(){
  echo
}

pgrest(){
  echo
}

pgrest-a2cps-dev(){
  echo
}

pgrest-a2cps-prod(){
  echo
}

proxy(){
  echo "nginx:"
  cd $here/proxy/nginx
  ./burnup

  echo "site-router:"
  cd $here/proxy/site-router
  ./burnup

}

security(){
  echo
}

skadmin(){
  echo "skadmin:"
  cd $here/skadmin/renew-sk-secret
  ./burnup
  cd $here/skadmin
  ./burnup

}

streams(){
  echo
}

systems(){
  echo
}

tenants(){
  echo
}

tokens(){
  echo
}

vault(){
  echo "vault:"
  cd $here/vault
  ./burnup
  kubectl wait --for=condition=available deploy/vault
  ./unseal
}


primary_site(){
  echo
}


associate_site(){
  echo
}



create_kservice(){
    echo "creating kubernetes servies:"
    find -name '*service*.yml' -exec kubectl apply -f {} \;
}

get_public_keys(){
    cd $here/admin
    ./get-tenant-publickeys
}



### functions


get_vault_token(){
  echo
}

check_vault_unsealed(){
  echo
}

create_kservice(){
    echo "creating kubernetes servies:"
    find -name '*service*.yml' -exec kubectl apply -f {} \;
}

get_public_keys(){
    cd $here/admin
    ./get-tenant-publickeys
}


init(){
    {% if "proxy" in service_list %}
    echo "nginx:"
    cd $here/proxy/nginx 
    ./burnup

    echo "site-router:"
    cd $here/proxy/site-router 
    ./burnup
    {% endif%}

    {% if "vault" in service_list %}
    echo "vault:"
    cd $here/vault 
    ./burnup
    kubectl wait --for=condition=available deploy/vault
    ./unseal
    {% endif%}

    {% if "skadmin" in service_list %}
    echo "skadmin:"
    cd $here/skadmin/renew-sk-secret 
    ./burnup

    cd $here/skadmin
    ./burnup
    {% endif%}
}

primary_services(){
    {% if  "tenants" in service_list %}
    echo "tenants:"
    cd $here/tenants/postgres
    ./burnup

    cd $here/tenants/api
    ./burnup
    {% endif %}

    {% if  "security" in service_list %}
    echo "security-kernel:"
    cd $here/security/postgres
    ./burnup

    # vault secret renewed in here
    cd $here/security/api
    ./burnup
    {% endif %}

    {% if  "tokens" in service_list %}
    echo "tokens:"
    cd $here/tokens
    ./burnup
    {% endif %}

    {% if  "authenticator" in service_list %}
    echo "authenticator:"
    cd $here/authenticator/ldap
    ./burnup

    cd $here/authenticator/postgres
    ./burnup

    cd $here/authenticator/api
    ./burnup
    {% endif %}
}

secondary_services() {


    {% if  "systems" in service_list %}
    echo "systems:"
    cd $here/systems/postgres
    ./burnup

    cd $here/systems/api
    ./burnup
    {% endif %}

    {% if  "files" in service_list %}
    echo "files:"
    cd $here/files/api
    ./burnup
    {% endif %}

    {% if  "apps" in service_list %}
    echo "apps:"
    cd $here/apps/postgres
    ./burnup

    cd $here/apps/api
    ./burnup
    {% endif %}

    {% if  "jobs" in service_list %}
    echo "jobs:"
    cd $here/jobs/postgres
    ./burnup

    cd $here/jobs/rabbitmq
    ./burnup

    cd $here/jobs/api
    ./burnup

    cd $here/jobs/workers
    ./burnup

    cd $here/jobs/readers
    ./burnup
    {% endif %}

    {% if  "meta" in service_list %}
    echo "meta:"
    cd $here/meta/mongo
    ./burnup

    cd $here/meta/api
    ./burnup
    {% endif %}

    {% if  "streams" in service_list %}
    echo "streams:"
    cd $here/streams/mysql
    ./burnup

    cd $here/streams/influx
    ./burnup

    cd $here/streams/kapacitor
    ./burnup

    cd $here/streams/chords
    ./burnup

    cd $here/streams/api
    ./burnup
    {% endif %}

    {% if  "actors" in service_list %}
    echo "actors:"
    cd $here/actors/api
    ./burnup
    {% endif %}

    {% if  "monitoring" in service_list %}
    echo "monitoring:"
    cd $here/monitoring
    ./burnup
    {% endif %}

    {% if  "pgrest" in service_list %}
    echo "pgrest:"
    cd $here/pgrest
    ./burnup
    {% endif %}

    {% if  "elastic" in service_list %}
    # echo "elastic:"
    # cd $here/elastic
    # ./burnup
    {% endif %}

}

### run

#getconfig

case $1 in
  checkvault)
    "$@"
    exit 0
    ;;
  init)
    "$@"
    exit 0
    ;;
  initnew)
    preflight_check
    proxy
    postnginx_check
    vault
    #checkvault
    skadmin
    exit 0
    ;;
  preflight_check)
    "$@"
    exit 0
    ;;
  postnginx_check)
    "$@"
    exit 0
    ;;
  primary_services)
    "$@"
    exit 0
    ;;
  secondary_services)
    "$@"
    exit 0
    ;;
  create_kservice)
    "$@"
    exit 0
    ;;
  get_public_keys)
    "$@"
    exit 0
    ;;
  *)
    usage
    exit 0
    ;;
esac
