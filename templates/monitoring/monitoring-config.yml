apiVersion: v1
kind: ConfigMap
metadata: 
  name: monitoring-config
data:
  "service_site_url": "{{monitoring_service_url}}"
  "service_tenant_id": "{{monitoring_service_tenant_id}}"
  "site_id": "{{monitoring_service_site_id}}"
  "service_name": "{{monitoring_service_name}}"
  prometheus-config.yml: |-
    # my global config
    global:
      scrape_interval:     60s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 60s # Evaluate rules every 15 seconds. The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).
      external_labels:
        monitor: "{{monitoring_prometheus_external_label}}"

    # Alertmanager configuration
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          # - alertmanager:9093

    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"

    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: 'prometheus'

        static_configs:
        - targets: ['localhost:9090']

      - job_name: 'monitoring-exporter'
        static_configs:
        - targets: ['monitoring-exporter:8000']

      - job_name: 'vault-metrics'
        metrics_path: '/v1/sys/metrics'
        params:
          format: ['prometheus']
        scheme: {%-if "https" in monitoring_vault_url -%} 
         https 
        {% else -%} 
         http 
        {% endif %}
        static_configs:
        - targets: ['{{monitoring_vault_url | replace('http://', "") | replace('https://', "")}}']
  # monitoring: grafana prometheus resources
  grafana-datasources.yaml: |-
    {
        "apiVersion": 1,
        "datasources": [
            {
               "access":"proxy",
                "editable": true,
                "name": "prometheus",
                "orgId": 1,
                "type": "prometheus",
                "url": "http://prometheus:9090",
                "version": 1
            }
        ]
    }

  # monitoring: ldap config
  grafana-ldap.toml: |-
    # To troubleshoot and get more log info enable ldap debug logging via
    # GF_LOG_FILTERS=ldap:debug

    [[servers]]
    host = "ldap.tacc.utexas.edu"
    port = 389
    use_ssl = false
    start_tls = false
    ssl_skip_verify = false

    # Bind as authenticating user directly
    bind_dn = "uid=%s,ou=People,dc=tacc,dc=utexas,dc=edu"

    search_filter = "(uid=%s)"
    search_base_dns = ["ou=People,dc=tacc,dc=utexas,dc=edu"]
    group_search_filter = "(&(objectClass=groupOfUniqueNames)(uniqueMember=uid=%s,ou=People,dc=tacc,dc=utexas,dc=edu))"
    group_search_base_dns = ["ou=Groups,dc=tacc,dc=utexas,dc=edu"]

    [servers.attributes]
    name = "givenName"
    surname = "sn"
    username = "cn"
    email = "mail"
    # This is required to be set to "cn" in order for Grafana to perform the
    # secondary group look up with the custom filters we defined above.
    # Otherwise it tries to use whatever `memberOf` it can find in the directory,
    # which we don't want to do in most cases due to lack of support.
    member_of = "cn"

    # TAPIS org
    [[servers.group_mappings]]
    group_dn = "TACC-ACI-CIC"
    org_role = "Admin"
    org_id = 1
    grafana_admin = true

    [[servers.group_mappings]]
    group_dn = "*"
    org_role = "Viewer"
    org_id = 1
